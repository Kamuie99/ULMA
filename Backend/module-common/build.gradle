import org.gradle.api.services.BuildServiceParameters;
import org.gradle.api.services.BuildService;
import org.testcontainers.containers.MySQLContainer;
import java.nio.file.Paths;

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.testcontainers:testcontainers:1.19.8'
        classpath 'org.testcontainers:mysql:1.19.8'
        classpath 'mysql:mysql-connector-java:8.0.33'
    }
}

plugins {
    id 'nu.studer.jooq' version '9.0'
    id "org.sonarqube" version "5.0.0.4638"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'

    implementation 'org.jooq:jooq:3.19.11'
    implementation 'org.jooq:jooq-codegen:3.19.11'
    jooqGenerator 'org.jooq:jooq-meta:3.19.11'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'mysql:mysql-connector-java:8.0.33'
    runtimeOnly 'com.mysql:mysql-connector-j'
    jooqGenerator 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    implementation 'org.testcontainers:testcontainers'
    implementation 'org.testcontainers:mysql'

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
}

Provider<MySqlService> dbContainerProvider = project.getGradle()
        .getSharedServices()
        .registerIfAbsent("mysql", MySqlService.class, spec -> {
            spec.getParameters().getSchemaFilePath().set(
                    Paths.get(project.getProjectDir().toString(), "src", "main", "resources", "schema.sql").toString()
            );
        });

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN

                def dbContainer = dbContainerProvider.get().getContainer()
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = dbContainer.jdbcUrl
                    user = dbContainer.username
                    password = dbContainer.password
                }

                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = 'ulma'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.ssafy11.ulma.generated'
                        directory = 'build/generated-src/jooq/main'
                    }
                }
            }
        }
    }
}


test {
    useJUnitPlatform()
    systemProperty 'org.testcontainers', 'DEBUG'

    usesService dbContainerProvider
    doFirst {
        def dbContainer = dbContainerProvider.get().container
        systemProperty('spring.datasource.url', dbContainer.jdbcUrl)
        systemProperty('spring.datasource.username', dbContainer.username)
        systemProperty('spring.datasource.password', dbContainer.password)
    }
}

bootJar.enabled = false
jar.enabled = true

sonar {
    properties {
        property "sonar.projectKey", "s11-fintech-finance-sub1_S11P21E204_bcdede1e-ca0a-452b-9519-bb727bd39561"
        property "sonar.projectName", "S11P21E204"
    }
}

abstract class MySqlService implements BuildService<MySqlService.Params>, AutoCloseable {

    interface Params extends BuildServiceParameters {
        Property<String> getSchemaFilePath();  // Property<String> 사용
    }

    private final MySQLContainer<?> container;

    MySqlService() {
        container = new MySQLContainer<>("mysql:8.0.33")
                .withDatabaseName("ulma")
                .withUsername("root")
                .withPassword("1234");
        container.start();

        String schemaFilePath = getParameters().getSchemaFilePath().get();  // get() 메서드로 값 가져옴
        File schemaFile = new File(schemaFilePath);

        if (schemaFile.exists()) {
            container.copyFileToContainer(
                    org.testcontainers.utility.MountableFile.forHostPath(schemaFilePath),
                    "/schema.sql"
            );
            container.execInContainer("mysql", "-u", "root", "-p1234", "ulma", "-e", "source /schema.sql");
        }
    }

    @Override
    public void close() {
        container.stop();
    }

    public MySQLContainer<?> getContainer() {
        return container;
    }
}